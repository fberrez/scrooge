// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scrooge.proto

package scrooge

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Transaction represents a transaction.
type Transaction struct {
	// AccountID is the ID of the account targeted
	// by the transaction.
	AccountID string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	// Amount is the transaction amount.
	Amount               int64    `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0618d1529404eb75, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Transaction) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// Account represents an account.
type Account struct {
	// AccountID is the ID of the account targeted
	// by the transaction.
	AccountID            string   `protobuf:"bytes,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_0618d1529404eb75, []int{1}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

// Response is the response sent by the balance
// service when the transaction is done.
type Response struct {
	// AccountID is the ID of the account edited
	// by the transaction.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	// Balance is the new balance after
	// the transaction has been applied.
	Balance              int64    `protobuf:"varint,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0618d1529404eb75, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Response) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "scrooge.Transaction")
	proto.RegisterType((*Account)(nil), "scrooge.Account")
	proto.RegisterType((*Response)(nil), "scrooge.Response")
}

func init() { proto.RegisterFile("scrooge.proto", fileDescriptor_0618d1529404eb75) }

var fileDescriptor_0618d1529404eb75 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2e, 0xca,
	0xcf, 0x4f, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x9c, 0xb9,
	0xb8, 0x43, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0x64, 0xb8, 0x38,
	0x1d, 0x93, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0x3c, 0x5d, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83,
	0x10, 0x02, 0x42, 0x62, 0x5c, 0x6c, 0x8e, 0xb9, 0x20, 0xb6, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x73,
	0x10, 0x94, 0xa7, 0xa4, 0xce, 0xc5, 0x0e, 0x55, 0x84, 0x6a, 0x00, 0x23, 0x9a, 0x01, 0x4a, 0x4e,
	0x5c, 0x1c, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xf8, 0x55, 0x0a, 0x49, 0x70, 0xb1,
	0x3b, 0x25, 0xe6, 0x24, 0xe6, 0x25, 0xa7, 0x82, 0x9d, 0xc1, 0x1c, 0x04, 0xe3, 0x1a, 0xd5, 0x70,
	0xb1, 0x07, 0x43, 0x1c, 0x2f, 0x64, 0xc3, 0xc5, 0xef, 0x9b, 0x98, 0x9d, 0x8a, 0xec, 0x01, 0x11,
	0x3d, 0x98, 0x47, 0x91, 0x44, 0xa5, 0x04, 0xe1, 0xa2, 0x30, 0xeb, 0x95, 0x18, 0x84, 0x8c, 0xb9,
	0xb8, 0xdc, 0x53, 0x4b, 0xa0, 0xc6, 0x0a, 0x09, 0xc0, 0x95, 0x40, 0x1d, 0x81, 0x55, 0x53, 0x12,
	0x1b, 0x38, 0xfc, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xe2, 0x85, 0xfb, 0x50, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScroogeClient is the client API for Scrooge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScroogeClient interface {
	// MakeTransaction is used to make a transaction on an account.
	MakeTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error)
	// GetBalance returns the balance of the account corresponding to
	// the given account id.
	GetBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Response, error)
}

type scroogeClient struct {
	cc *grpc.ClientConn
}

func NewScroogeClient(cc *grpc.ClientConn) ScroogeClient {
	return &scroogeClient{cc}
}

func (c *scroogeClient) MakeTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scrooge.Scrooge/MakeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scroogeClient) GetBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/scrooge.Scrooge/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScroogeServer is the server API for Scrooge service.
type ScroogeServer interface {
	// MakeTransaction is used to make a transaction on an account.
	MakeTransaction(context.Context, *Transaction) (*Response, error)
	// GetBalance returns the balance of the account corresponding to
	// the given account id.
	GetBalance(context.Context, *Account) (*Response, error)
}

// UnimplementedScroogeServer can be embedded to have forward compatible implementations.
type UnimplementedScroogeServer struct {
}

func (*UnimplementedScroogeServer) MakeTransaction(ctx context.Context, req *Transaction) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTransaction not implemented")
}
func (*UnimplementedScroogeServer) GetBalance(ctx context.Context, req *Account) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}

func RegisterScroogeServer(s *grpc.Server, srv ScroogeServer) {
	s.RegisterService(&_Scrooge_serviceDesc, srv)
}

func _Scrooge_MakeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScroogeServer).MakeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrooge.Scrooge/MakeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScroogeServer).MakeTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scrooge_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScroogeServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrooge.Scrooge/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScroogeServer).GetBalance(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scrooge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scrooge.Scrooge",
	HandlerType: (*ScroogeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeTransaction",
			Handler:    _Scrooge_MakeTransaction_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Scrooge_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrooge.proto",
}
